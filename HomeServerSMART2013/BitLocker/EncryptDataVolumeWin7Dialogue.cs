using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using  WSSControls.BelovedComponents;

namespace DojoNorthSoftware.WindowsServerSolutions.HomeServerSMART2013.UI.BitLocker
{
    public partial class EncryptDataVolumeWin7Dialogue : Form
    {
        bool createAutoUnlockKey;
        bool createAutoNumericPassword;
        bool allowAutoNumericPassword;
        bool createUserNumericPassword;
        bool createRecoveryKey;
        bool createPassword;
        bool createCert;
        bool isRoamingData;
        bool passwordExists;
        bool certExists;
        private String volume;
        private String volumeLabel;
        private String fileSystem;
        private bool isSystemVolumeEncrypted;

        /*
         * AT LEAST TWO KEYS MUST ALWAYS BE GENERATED!  SECURITY !!  EVERYONE'S RESPONSIBILITY !!
         * They can be...
         * 
         * Auto-unlock and auto-numeric (latter is generated by allow/enforce Key Escrow.
         * Auto-unlock, user numeric (latter is generated by user request, and this will be used if Key Escrow is allowed/enforced).
         * Auto-unlock, auto numeric, recovery.
         * Auto-unlock, user numeric, recovery.
         * Auto numeric, recovery. (User must elect to disable auto-unlock.)
         * User numeric, recovery. (User must elect to disable auto-unlock.)
         * 
         * At most one numeric key is generated.
         * One or two BEKs can be generated.
         * 
         * When FIPS is enabled, recovery key MUST be allowed or a policy error occurs.
         */

        public EncryptDataVolumeWin7Dialogue(String letter, String label, String fs, bool systemEncrypted, bool isRoaming,
            bool pwExists, bool cExists)
        {
            GPConfig.ReloadConfiguration();
            InitializeComponent();

            labelVolume.Text = "Volume to Encrypt: " + letter;
            labelVolumeLabel.Text = "Volume Label: " + label;
            labelFileSystem.Text = "File System: " + fs;
            volume = letter;
            volumeLabel = label;
            fileSystem = fs;
            isSystemVolumeEncrypted = systemEncrypted;
            isRoamingData = isRoaming;
            passwordExists = pwExists;
            certExists = cExists;
        }

        #region Properties
        public bool CreateAutoUnlockKey
        {
            get
            {
                if (cbAutoUnlock.Checked)
                {
                    return true;
                }

                return createAutoUnlockKey;
            }
        }

        public bool CreateAutoNumericPassword
        {
            get
            {
                return createAutoNumericPassword;
            }
        }

        public bool CreateUserNumericPassword
        {
            get
            {
                return createUserNumericPassword;
            }
        }

        public bool CreateRecoveryKey
        {
            get
            {
                return createRecoveryKey;
            }
        }

        public String Volume
        {
            get
            {
                return volume;
            }
        }

        public String VolumeLabel
        {
            get
            {
                return volumeLabel;
            }
        }

        public String FileSystem
        {
            get
            {
                return fileSystem;
            }
        }

        public String RecoveryKeyLocation
        {
            get
            {
                return tbRecoveryKeyLocation.Text;
            }
        }

        public String RecoveryPasswordLocation
        {
            get
            {
                return tbRecoveryPwLocation.Text;
            }
        }

        public EncryptionMethod Method
        {
            get
            {
                switch (encryptionMethod.SelectedItem.ToString())
                {
                    case "AES-128 with Diffuser":
                        {
                            return EncryptionMethod.AES_128_DIFFUSER;
                        }
                    case "AES-128":
                        {
                            return EncryptionMethod.AES_128;
                        }
                    case "AES-256":
                        {
                            return EncryptionMethod.AES_256;
                        }
                    case "AES-256 with Diffuser":
                        {
                            return EncryptionMethod.AES_256_DIFFUSER;
                        }
                    default:
                        {
                            return EncryptionMethod.DEFAULT_METHOD;
                        }
                }
            }
        }

        public bool AllowPrintingAndSaving
        {
            get
            {
                return checkBoxSaveExtra.Checked;
            }
        }

        public bool CreateCert
        {
            get
            {
                return createCert;
            }
        }

        public String Thumbprint
        {
            get
            {
                return tbCertThumbprint.Text;
            }
        }

        public bool CreatePassphrase
        {
            get
            {
                return createPassword;
            }
        }

        public String Passphrase
        {
            get
            {
                return tbPassword.Text;
            }
        }

        public bool CreateBl2gReader
        {
            get
            {
                if (cbNoBitLockerToGo.Checked)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
        }

        public bool SetOrg
        {
            get
            {
                return cbBitLockerId.Checked;
            }
        }

        public String OrgString
        {
            get
            {
                return tbBitLockerId.Text;
            }
        }
        #endregion

        private void EncryptDataVolumeWin7Dialogue_Load(object sender, EventArgs e)
        {
            /*
             * DETERMINING OPTIONS TO MAKE AVAILABLE TO USERS
             * 
             * KE = Key Escrow (allow), RD = create BEK, RP = create password, AA = auto-unlock key
             * The system must be allowed to create at least two keys; prevent encryption otherwise
             * 
             * KE = 0x0, RD = 0x0, RP = 0x0         FAIL - encryption cannot proceed, STOP
             * KE = 0x1, RD = 0x0, RP = 0x0         Create AA, RP; do not allow saving of anything
             * KE = 0x0, RD = 0x1, RP = 0x1         Create AA, RD, RP; save both to USB disk; allow user to save extra RP
             * KE = 0x0, RD = 0x0, RP = 0x1         Create AA, RP; save RP copy to USB disk; allow user to save extra RP
             * KE = 0x0, RD = 0x1, RP = 0x0         Create AA, RD; save RD copy to USB disk; do not allow saving of anything
             * KE = 0x1, RD = any, RP = any         Create AA, RD if 0x1, RP always; save RD/RP (if RP 0x1) to USB disk; allow saving of extra RP if RP 0x1
             * FIPS on and RD = 0x0                 FAIL - policy conflict, STOP
             * 
             * For KE to be considered 0x1, the "allow" Key Escrow must be true. Require KE has no affect if allow is off (actually this is an error).
             * 
             */

            // Enable/dim options based on Group Policy and OS version.
            // Encryption Method
            if (GPConfig.Method == EncryptionMethod.DEFAULT_METHOD)
            {
                encryptionMethod.SelectedIndex = 1;
                encryptionMethod.Enabled = true;
            }
            else
            {
                switch (GPConfig.Method)
                {
                    case EncryptionMethod.AES_128:
                        {
                            encryptionMethod.SelectedIndex = 2;
                            encryptionMethod.Enabled = false;
                            break;
                        }
                    case EncryptionMethod.AES_128_DIFFUSER:
                        {
                            encryptionMethod.SelectedIndex = 0;
                            encryptionMethod.Enabled = false;
                            break;
                        }
                    case EncryptionMethod.AES_256:
                        {
                            encryptionMethod.SelectedIndex = 3;
                            encryptionMethod.Enabled = false;
                            break;
                        }
                    case EncryptionMethod.AES_256_DIFFUSER:
                        {
                            encryptionMethod.SelectedIndex = 1;
                            encryptionMethod.Enabled = false;
                            break;
                        }
                    default:
                        {
                            encryptionMethod.SelectedIndex = 1;
                            encryptionMethod.Enabled = true;
                            break;
                        }
                }
            }

            // 48-digit recovery password and Password (affected by FIPS)
            if (GPConfig.IsFipsComplianceMandatory)
            {
                cbRecoveryPw.Checked = false;
                cbRecoveryPw.Enabled = false;
                createAutoNumericPassword = false;
                createUserNumericPassword = false;
                allowAutoNumericPassword = false;
                cbPassword.Checked = false;
                cbPassword.Enabled = false;
                tbPassword.ReadOnly = true;
                tbConfirmPassword.ReadOnly = true;
                tbPassword.Enabled = false;
                tbConfirmPassword.Enabled = false;
                createPassword = false;
            }

            if (passwordExists && !GPConfig.IsFipsComplianceMandatory)
            {
                cbPassword.Checked = false;
                cbPassword.Enabled = false;
                tbPassword.PasswordChar = '\0';
                tbPassword.Text = "A Password already exists on the volume";
                tbPassword.Enabled = false;
                tbConfirmPassword.Enabled = false;
            }

            if (certExists)
            {
                cbSmartCard.Checked = false;
                cbSmartCard.Enabled = false;
                btnSelectCert.Enabled = false;
                tbCertThumbprint.Text = "A Certificate already exists on the volume";
                tbCertThumbprint.Enabled = false;
                createCert = false;
            }

            if (isRoamingData)
            {
                // 48-digit passwords - affected by FIPS
                if (!GPConfig.IsFipsComplianceMandatory && GPConfig.Win7RdvRequireNumericPw)
                {
                    cbRecoveryPw.Checked = true;
                    cbRecoveryPw.Enabled = false;
                    btnBrowseRecoveryPassword.Enabled = true;
                    createAutoNumericPassword = false;
                    createUserNumericPassword = true;
                    allowAutoNumericPassword = false;
                }
                else if (!GPConfig.IsFipsComplianceMandatory && !GPConfig.Win7RdvAllowNumericPw)
                {
                    cbRecoveryPw.Checked = false;
                    cbRecoveryPw.Enabled = false;
                    btnBrowseRecoveryPassword.Enabled = false;
                    createAutoNumericPassword = true;
                    createUserNumericPassword = false;
                    allowAutoNumericPassword = true;
                }
                else if(!GPConfig.IsFipsComplianceMandatory)
                {
                    cbRecoveryPw.Checked = true;
                    cbRecoveryPw.Enabled = true;
                    btnBrowseRecoveryPassword.Enabled = true;
                    createAutoNumericPassword = false;
                    createUserNumericPassword = true;
                    allowAutoNumericPassword = true;
                }

                // Recovery Key
                if (GPConfig.Win7RdvRequireBek)
                {
                    cbRecoveryKey.Checked = true;
                    cbRecoveryKey.Enabled = false;
                    btnBrowseRecoveryKey.Enabled = true;
                    createAutoUnlockKey = true;
                    createRecoveryKey = true;
                }
                else if (!GPConfig.Win7RdvAllowBek)
                {
                    cbRecoveryKey.Checked = false;
                    cbRecoveryKey.Enabled = false;
                    btnBrowseRecoveryKey.Enabled = false;
                    createAutoUnlockKey = true;
                    createRecoveryKey = false;
                }
                else
                {
                    cbRecoveryKey.Checked = true;
                    cbRecoveryKey.Enabled = true;
                    btnBrowseRecoveryKey.Enabled = true;
                    tbRecoveryKeyLocation.Enabled = true;
                    createAutoUnlockKey = true;
                    createRecoveryKey = true;
                }

                // Passwords - affected by FIPS
                if (!GPConfig.IsFipsComplianceMandatory && GPConfig.Win7RdvRequirePassphrase && !passwordExists)
                {
                    cbPassword.Checked = true;
                    cbPassword.Enabled = false;
                    tbPassword.ReadOnly = false;
                    tbPassword.Enabled = true;
                    tbConfirmPassword.ReadOnly = false;
                    tbConfirmPassword.Enabled = true;
                    createPassword = true;
                }
                else if (!GPConfig.IsFipsComplianceMandatory && !GPConfig.Win7RdvAllowPassphrase && !passwordExists)
                {
                    cbPassword.Checked = false;
                    cbPassword.Enabled = false;
                    tbPassword.ReadOnly = true;
                    tbPassword.Enabled = false;
                    tbConfirmPassword.ReadOnly = true;
                    tbCertThumbprint.Enabled = false;
                    createPassword = false;
                }
                else if (!GPConfig.IsFipsComplianceMandatory && !passwordExists)
                {
                    cbPassword.Checked = true;
                    cbPassword.Enabled = true;
                    tbPassword.ReadOnly = false;
                    tbPassword.Enabled = true;
                    tbConfirmPassword.ReadOnly = false;
                    tbConfirmPassword.Enabled = true;
                    createPassword = true;
                }

                // Certs (Smart Cards)
                if (GPConfig.Win7RdvEnforceUserCert && !certExists)
                {
                    cbSmartCard.Checked = true;
                    cbSmartCard.Enabled = false;
                    btnSelectCert.Enabled = true;
                    tbCertThumbprint.Enabled = true;
                    createCert = true;
                }
                else if (!GPConfig.Win7RdvAllowUserCert && !certExists)
                {
                    cbSmartCard.Checked = false;
                    cbSmartCard.Enabled = false;
                    btnSelectCert.Enabled = false;
                    tbCertThumbprint.Enabled = false;
                    createCert = false;
                }
                else if (!certExists)
                {
                    cbSmartCard.Checked = false;
                    cbSmartCard.Enabled = true;
                    btnSelectCert.Enabled = false;
                    tbCertThumbprint.Enabled = false;
                    createCert = false;
                }

                // Active Directory Info
                if (GPConfig.RdvRequireActiveDirectoryBackup == "Required"
                        && DomainInfo.IsInDomain())
                {
                    labelAD.Text = "Your system administrator requires that BitLocker key information " +
                        "be escrowed to Active Directory. If you are not connected to your company's " +
                        "domain, the encryption will fail to start. Ensure you are connected to the " +
                        "domain via the network, VPN or dial-up.";
                }
                else if (GPConfig.RdvRequireActiveDirectoryBackup == "Required")
                {
                    labelAD.Text = "Your system administrator requires that BitLocker key information " +
                        "be escrowed to Active Directory. However, your computer is not joined to an Active " +
                        "Directory domain. Encryption will likely fail to start. Contact your system administrator " +
                        "to fix this invalid policy setting.";
                }
                else
                {
                    labelAD.Text = "There are no Active Directory enforced requirements. You may begin " +
                        "encryption regardless of your domain connectivity.";
                }

                // BitLocker To Go Reader?
                if (fileSystem == "NTFS" || GPConfig.RdvNoBitLockerToGoReader == "Do Not Install")
                {
                    cbNoBitLockerToGo.Checked = true;
                    cbNoBitLockerToGo.Enabled = false;
                }
            }
            else // Fixed Data
            {
                // 48-digit passwords - affected by FIPS
                if (!GPConfig.IsFipsComplianceMandatory && GPConfig.Win7FdvRequireNumericPw)
                {
                    cbRecoveryPw.Checked = true;
                    cbRecoveryPw.Enabled = false;
                    btnBrowseRecoveryPassword.Enabled = true;
                    createAutoNumericPassword = false;
                    createUserNumericPassword = true;
                    allowAutoNumericPassword = false;
                }
                else if (!GPConfig.IsFipsComplianceMandatory && !GPConfig.Win7FdvAllowNumericPw)
                {
                    cbRecoveryPw.Checked = false;
                    cbRecoveryPw.Enabled = false;
                    btnBrowseRecoveryPassword.Enabled = false;
                    createAutoNumericPassword = true;
                    createUserNumericPassword = false;
                    allowAutoNumericPassword = true;
                }
                else if (!GPConfig.IsFipsComplianceMandatory)
                {
                    cbRecoveryPw.Checked = true;
                    cbRecoveryPw.Enabled = true;
                    btnBrowseRecoveryPassword.Enabled = true;
                    createAutoNumericPassword = false;
                    createUserNumericPassword = true;
                    allowAutoNumericPassword = true;
                }

                // Recovery Key
                if (GPConfig.Win7FdvRequireBek)
                {
                    cbRecoveryKey.Checked = true;
                    cbRecoveryKey.Enabled = false;
                    btnBrowseRecoveryKey.Enabled = true;
                    createAutoUnlockKey = true;
                    createRecoveryKey = true;
                }
                else if (!GPConfig.Win7FdvAllowBek)
                {
                    cbRecoveryKey.Checked = false;
                    cbRecoveryKey.Enabled = false;
                    btnBrowseRecoveryKey.Enabled = false;
                    createAutoUnlockKey = true;
                    createRecoveryKey = false;
                }
                else
                {
                    cbRecoveryKey.Checked = true;
                    cbRecoveryKey.Enabled = true;
                    btnBrowseRecoveryKey.Enabled = true;
                    tbRecoveryKeyLocation.Enabled = true;
                    createAutoUnlockKey = true;
                    createRecoveryKey = true;
                }

                // Passwords - affected by FIPS
                if (!GPConfig.IsFipsComplianceMandatory && GPConfig.Win7FdvRequirePassphrase)
                {
                    cbPassword.Checked = true;
                    cbPassword.Enabled = false;
                    tbPassword.ReadOnly = false;
                    tbPassword.Enabled = true;
                    tbConfirmPassword.ReadOnly = false;
                    tbConfirmPassword.Enabled = true;
                    createPassword = true;
                }
                else if (!GPConfig.IsFipsComplianceMandatory && !GPConfig.Win7FdvAllowPassphrase)
                {
                    cbPassword.Checked = false;
                    cbPassword.Enabled = false;
                    tbPassword.ReadOnly = true;
                    tbPassword.Enabled = false;
                    tbConfirmPassword.ReadOnly = true;
                    tbConfirmPassword.Enabled = false;
                    createPassword = false;
                }
                else if (!GPConfig.IsFipsComplianceMandatory)
                {
                    cbPassword.Checked = true;
                    cbPassword.Enabled = true;
                    tbPassword.ReadOnly = false;
                    tbPassword.Enabled = true;
                    tbConfirmPassword.ReadOnly = false;
                    tbConfirmPassword.Enabled = true;
                    createPassword = true;
                }

                // Certs (Smart Cards)
                if (GPConfig.Win7FdvEnforceUserCert)
                {
                    cbSmartCard.Checked = true;
                    cbSmartCard.Enabled = false;
                    btnSelectCert.Enabled = true;
                    tbCertThumbprint.Enabled = true;
                    createCert = true;
                }
                else if (!GPConfig.Win7FdvAllowUserCert)
                {
                    cbSmartCard.Checked = false;
                    cbSmartCard.Enabled = false;
                    btnSelectCert.Enabled = false;
                    tbCertThumbprint.Enabled = false;
                    createCert = false;
                }
                else
                {
                    cbSmartCard.Checked = false;
                    cbSmartCard.Enabled = true;
                    btnSelectCert.Enabled = false;
                    tbCertThumbprint.Enabled = false;
                    createCert = false;
                }

                // Active Directory Info
                if (GPConfig.FdvRequireActiveDirectoryBackup == "Required"
                        && DomainInfo.IsInDomain())
                {
                    labelAD.Text = "Your system administrator requires that BitLocker key information " +
                        "be escrowed to Active Directory. If you are not connected to your company's " +
                        "domain, the encryption will fail to start. Ensure you are connected to the " +
                        "domain via the network, VPN or dial-up.";
                }
                else if (GPConfig.FdvRequireActiveDirectoryBackup == "Required")
                {
                    labelAD.Text = "Your system administrator requires that BitLocker key information " +
                        "be escrowed to Active Directory. However, your computer is not joined to an Active " +
                        "Directory domain. Encryption will likely fail to start. Contact your system administrator " +
                        "to fix this invalid policy setting.";
                }
                else
                {
                    labelAD.Text = "There are no Active Directory enforced requirements. You may begin " +
                        "encryption regardless of your domain connectivity.";
                }

                // BitLocker To Go Reader?
                if (fileSystem == "NTFS" || GPConfig.RdvNoBitLockerToGoReader == "Do Not Install")
                {
                    cbNoBitLockerToGo.Checked = true;
                    cbNoBitLockerToGo.Enabled = false;
                }
            }

            // Organization ID field on the disk
            if (String.IsNullOrEmpty(GPConfig.IdentificationFieldString))
            {
                // Allow user to set it.
                cbBitLockerId.Enabled = true;
                cbBitLockerId.Checked = false;
                tbBitLockerId.ReadOnly = true;
                tbBitLockerId.Enabled = false;
            }
            else
            {
                // Set by admin; user cannot change.
                cbBitLockerId.Enabled = false;
                cbBitLockerId.Checked = true;
                tbBitLockerId.ReadOnly = true;
                tbBitLockerId.Text = GPConfig.IdentificationFieldString;
                tbBitLockerId.Enabled = false;
            }

            // FIPS compliance check
            if (GPConfig.IsFipsComplianceMandatory &&
                ((isRoamingData && !GPConfig.Win7RdvAllowBek) ||
                (!isRoamingData && !GPConfig.Win7FdvAllowBek)))
            {
                QMessageBox.Show("BitLocker cannot encrypt your volume. FIPS compliance is enforced on this computer, " +
                    "and Recovery Keys are disabled by policy. Therefore no recovery mechanism is available for this " +
                    "drive (FIPS prevents Recovery Passwords and Key Escrow to Active Directory). Encryption of the " +
                    "volume is impossible until these conflicting settings are resolved. Contact your system administrator " +
                    "for assistance.", "Policy Conflict", MessageBoxButtons.OK, MessageBoxIcon.Error);
                DimEverything();
                this.Close();
                return;
            }
            else if (GPConfig.IsFipsComplianceMandatory &&
                ((isRoamingData && (GPConfig.Win7RdvRequirePassphrase || GPConfig.Win7RdvRequireNumericPw)) ||
                (!isRoamingData && (GPConfig.Win7RdvRequirePassphrase || GPConfig.Win7RdvRequireNumericPw))))
            {
                QMessageBox.Show("BitLocker cannot encrypt your volume. FIPS compliance is enforced on this computer, " +
                    "and Passwords are enforced by policy. FIPS prevents all BitLocker passwords (48-digit user " +
                    "passwords, Key Escrow to Active Directory and passphrases). Encryption of the " +
                    "volume is impossible until these conflicting settings are resolved. Contact your system administrator " +
                    "for assistance.", "Policy Conflict", MessageBoxButtons.OK, MessageBoxIcon.Error);
                DimEverything();
                this.Close();
                return;
            }
            else if (GPConfig.IsFipsComplianceMandatory &&
                ((isRoamingData && GPConfig.RdvRequireActiveDirectoryBackup == "Mandatory") ||
                (!isRoamingData && GPConfig.FdvRequireActiveDirectoryBackup == "Mandatory")))
            {
                QMessageBox.Show("BitLocker cannot encrypt your volume. FIPS compliance is enforced on this computer, " +
                    "and Key Escrow to Active Directory is enforced by policy. FIPS prevents numeric passwords, which " +
                    "are used for Key Escrow. Encryption of the " +
                    "volume is impossible until these conflicting settings are resolved. Contact your system administrator " +
                    "for assistance.", "Policy Conflict", MessageBoxButtons.OK, MessageBoxIcon.Error);
                DimEverything();
                this.Close();
                return;
            }
            else
            {
                MakeAutoUnlockCheckboxAvailable();
                VerifyFieldsAndSetEncryptButton();
            }

            if (!isSystemVolumeEncrypted)
            {
                cbAutoUnlock.Text = "Auto-Unlock not available (OS volume not encrypted)";
                cbAutoUnlock.Checked = false;
                cbAutoUnlock.Enabled = false;
                createAutoUnlockKey = false;
            }
        }

        private void btnBrowseRecoveryPassword_Click(object sender, EventArgs e)
        {
            String path = String.Empty;
            FolderBrowserDialog fbd = new FolderBrowserDialog();
            bool waitForUser = true;
            String oldValue = tbRecoveryPwLocation.Text;

            while (waitForUser)
            {
                fbd.Description = "Select folder in which to save password.";
                DialogResult result = fbd.ShowDialog();
                if (result == DialogResult.OK && fbd.SelectedPath != String.Empty)
                {
                    path = fbd.SelectedPath;
                    waitForUser = false;

                    if (!waitForUser)
                    {
                        waitForUser = UtilityMethods.AreDisksSame(volume, path.Substring(0, 2));
                    }

                    if (!waitForUser)
                    {
                        waitForUser = UtilityMethods.IsComposeTextFileError(path);
                    }

                    if (!waitForUser)
                    {
                        // All is well, so update field.
                        tbRecoveryPwLocation.Text = path;
                        VerifyFieldsAndSetEncryptButton();
                    }
                    else
                    {
                        tbRecoveryPwLocation.Text = oldValue;
                        VerifyFieldsAndSetEncryptButton();
                    }
                }
                else
                {
                    waitForUser = false;
                    tbRecoveryPwLocation.Text = oldValue;
                    VerifyFieldsAndSetEncryptButton();
                    return;
                }
            }
        }

        private void btnBrowseRecoveryKey_Click(object sender, EventArgs e)
        {
            String path = String.Empty;
            UsbDiskChooser udc = new UsbDiskChooser();
            bool waitForUser = true;

            while (waitForUser)
            {
                udc.ShowDialog();
                if (udc.SelectedDrive != String.Empty)
                {
                    path = udc.SelectedDrive;

                    waitForUser = UtilityMethods.AreDisksSame(volume, path.Substring(0, 2));

                    if (!waitForUser)
                    {
                        try
                        {
                            System.IO.FileStream fs = System.IO.File.Create(path + "\\Tarynblmtemp65535.txt");
                            fs.Flush();
                            fs.Close();
                            System.IO.File.Delete(path + "\\Tarynblmtemp65535.txt");
                            waitForUser = false;
                        }
                        catch
                        {
                            waitForUser = true;
                            QMessageBox.Show("Path " + path + " cannot be used. Home Server SMART attempted to write a temporary " +
                                "file to this location (prior to External Key Protector generation) to validate your ability to write " +
                                "a file to this location. That attempt failed. Please choose another location.", "Path Not Available",
                                MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        }
                    }
                }
                else
                {
                    waitForUser = false;
                    return;
                }
            }
            // All is well, so update field.
            tbRecoveryKeyLocation.Text = path;
            VerifyFieldsAndSetEncryptButton();
        }

        private void cbRecoveryPw_CheckedChanged(object sender, EventArgs e)
        {
            if (cbRecoveryPw.Checked)
            {
                // If this box is checked, we need the save option available.
                btnBrowseRecoveryPassword.Enabled = true;
                tbRecoveryPwLocation.Enabled = true;
                createUserNumericPassword = true;
                createAutoNumericPassword = false;
            }
            else
            {
                btnBrowseRecoveryPassword.Enabled = false;
                tbRecoveryPwLocation.Enabled = false;
                createUserNumericPassword = false;
                if (allowAutoNumericPassword)
                {
                    createAutoNumericPassword = true;
                }
            }

            MakeAutoUnlockCheckboxAvailable();
            VerifyFieldsAndSetEncryptButton();
        }

        private void cbRecoveryKey_CheckedChanged(object sender, EventArgs e)
        {
            if (cbRecoveryKey.Checked)
            {
                // If this box is checked, we need the save option available.
                btnBrowseRecoveryKey.Enabled = true;
                tbRecoveryKeyLocation.Enabled = true;
                createRecoveryKey = true;
            }
            else
            {
                btnBrowseRecoveryKey.Enabled = false;
                tbRecoveryKeyLocation.Enabled = false;
                createRecoveryKey = false;
            }

            MakeAutoUnlockCheckboxAvailable();
            VerifyFieldsAndSetEncryptButton();
        }

        private void MakeAutoUnlockCheckboxAvailable()
        {
            int keyProtectorCount = 0;

            if (createAutoNumericPassword)
            {
                keyProtectorCount++;
            }
            if (createRecoveryKey)
            {
                keyProtectorCount++;
            }
            if (createUserNumericPassword)
            {
                keyProtectorCount++;
            }
            if (createPassword)
            {
                keyProtectorCount++;
            }
            if (createCert)
            {
                keyProtectorCount++;
            }

            // We don't count the createAutoUnlockKey because that's the one we need
            // to see if we can disable. At least two OTHER protectors must be available.
            // In either case, the system volume must be encrypted.
            if (keyProtectorCount >= 2 && isSystemVolumeEncrypted)
            {
                // Enable it (or make sure it's enabled), and check it.
                cbAutoUnlock.Enabled = true;
                cbAutoUnlock.Checked = true;
            }
            else if(isSystemVolumeEncrypted)
            {
                // Not enough available, so check it and disable it.  It get's checked so
                // even if it became available again, the user must un-check it as verification.
                cbAutoUnlock.Checked = true;
                cbAutoUnlock.Enabled = false;
            }
        }

        private void VerifyFieldsAndSetEncryptButton()
        {
            // Don't allow encryption unless fields are all valid.

            if ((cbRecoveryPw.Checked) &&
                String.IsNullOrEmpty(tbRecoveryPwLocation.Text))
            {
                btnEncrypt.Enabled = false;
                return;
            }
            if ((cbRecoveryKey.Checked) &&
                String.IsNullOrEmpty(tbRecoveryKeyLocation.Text))
            {
                btnEncrypt.Enabled = false;
                return;
            }
            if ((cbPassword.Checked) &&
                ((String.IsNullOrEmpty(tbPassword.Text) || String.IsNullOrEmpty(tbConfirmPassword.Text)) ||
                (isRoamingData && tbPassword.Text.Length < GPConfig.Win7RdvMinimumPassphrase ||
                !isRoamingData && tbPassword.Text.Length < GPConfig.Win7FdvMinimumPassphrase) ||
                (tbPassword.Text != tbConfirmPassword.Text)))
            {
                btnEncrypt.Enabled = false;
                return;
            }
            if (cbSmartCard.Checked && String.IsNullOrEmpty(tbCertThumbprint.Text))
            {
                btnEncrypt.Enabled = false;
                return;
            }
            if (cbBitLockerId.Checked && String.IsNullOrEmpty(tbBitLockerId.Text))
            {
                btnEncrypt.Enabled = false;
                return;
            }

            btnEncrypt.Enabled = true;
        }

        private void CheckPasswordFields()
        {
            // If both fields have text in them, compare them to be sure they match.
            if (!String.IsNullOrEmpty(tbPassword.Text) &&
                !String.IsNullOrEmpty(tbConfirmPassword.Text) &&
                tbPassword.Text != tbConfirmPassword.Text)
            {
                QMessageBox.Show("The values for Password and Confirm Password do not match.",
                    "Password Mismatch", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                tbPassword.Text = String.Empty;
                tbConfirmPassword.Text = String.Empty;
                tbPassword.Focus();
            }

            if (!String.IsNullOrEmpty(tbPassword.Text) &&
                !String.IsNullOrEmpty(tbConfirmPassword.Text) &&
                isRoamingData && tbPassword.Text.Length < GPConfig.Win7RdvMinimumPassphrase)
            {
                QMessageBox.Show("Your password does not meet the minimum length of " +
                    GPConfig.Win7RdvMinimumPassphrase.ToString() + " characters.",
                    "Password Mismatch", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                tbPassword.Text = String.Empty;
                tbConfirmPassword.Text = String.Empty;
                tbPassword.Focus();
            }
            else if (!String.IsNullOrEmpty(tbPassword.Text) &&
                !String.IsNullOrEmpty(tbConfirmPassword.Text) &&
                !isRoamingData && tbPassword.Text.Length < GPConfig.Win7FdvMinimumPassphrase)
            {
                QMessageBox.Show("Your password does not meet the minimum length of " +
                    GPConfig.Win7RdvMinimumPassphrase.ToString() + " characters.",
                    "Password Length", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                tbPassword.Text = String.Empty;
                tbConfirmPassword.Text = String.Empty;
                tbPassword.Focus();
            }
        }

        private void DimEverything()
        {
            encryptionMethod.Enabled = false;
            cbRecoveryKey.Enabled = false;
            cbRecoveryPw.Enabled = false;
            btnBrowseRecoveryPassword.Enabled = false;
            btnBrowseRecoveryKey.Enabled = false;
            cbAutoUnlock.Enabled = false;
            checkBoxSaveExtra.Enabled = false;
            btnEncrypt.Enabled = false;
            cbPassword.Checked = false;
            cbPassword.Enabled = false;
            cbSmartCard.Checked = false;
            cbSmartCard.Enabled = false;
            tbPassword.ReadOnly = true;
            tbConfirmPassword.ReadOnly = true;
            cbAutoUnlock.Enabled = false;
            cbBitLockerId.Enabled = false;
            cbNoBitLockerToGo.Enabled = false;
        }

        private void cbBitLockerId_CheckedChanged(object sender, EventArgs e)
        {
            if (cbBitLockerId.Checked)
            {
                tbBitLockerId.ReadOnly = false;
                tbBitLockerId.Enabled = true;
            }
            else
            {
                tbBitLockerId.Text = String.Empty;
                tbBitLockerId.ReadOnly = true;
                tbBitLockerId.Enabled = false;
            }
            MakeAutoUnlockCheckboxAvailable();
            VerifyFieldsAndSetEncryptButton();
        }

        private void cbPassword_CheckedChanged(object sender, EventArgs e)
        {
            if (cbPassword.Checked)
            {
                tbPassword.ReadOnly = false;
                tbPassword.Enabled = true;
                tbConfirmPassword.ReadOnly = false;
                tbConfirmPassword.Enabled = true;
                createPassword = true;
            }
            else
            {
                tbPassword.Text = String.Empty;
                tbPassword.ReadOnly = true;
                tbPassword.Enabled = false;
                tbConfirmPassword.Text = String.Empty;
                tbConfirmPassword.ReadOnly = true;
                tbConfirmPassword.Enabled = false;
                createPassword = false;
            }

            MakeAutoUnlockCheckboxAvailable();
            VerifyFieldsAndSetEncryptButton();
        }

        private void tbPassword_Leave(object sender, EventArgs e)
        {
            CheckPasswordFields();
            MakeAutoUnlockCheckboxAvailable();
            VerifyFieldsAndSetEncryptButton();
        }

        private void tbConfirmPassword_Leave(object sender, EventArgs e)
        {
            CheckPasswordFields();
            MakeAutoUnlockCheckboxAvailable();
            VerifyFieldsAndSetEncryptButton();
        }

        private void cbSmartCard_CheckedChanged(object sender, EventArgs e)
        {
            if (cbSmartCard.Checked)
            {
                btnSelectCert.Enabled = true;
                tbCertThumbprint.Enabled = true;
                createCert = true;
            }
            else
            {
                btnSelectCert.Enabled = false;
                tbCertThumbprint.Enabled = false;
                createCert = false;
            }
            MakeAutoUnlockCheckboxAvailable();
            VerifyFieldsAndSetEncryptButton();
        }

        private void tbPassword_TextChanged(object sender, EventArgs e)
        {
            if (tbPassword.Text == tbConfirmPassword.Text &&
                ((isRoamingData && tbPassword.Text.Length >= GPConfig.Win7RdvMinimumPassphrase) ||
                (!isRoamingData && tbPassword.Text.Length >= GPConfig.Win7FdvMinimumPassphrase)))
            {
                VerifyFieldsAndSetEncryptButton();
            }
            else
            {
                btnEncrypt.Enabled = false;
            }
        }

        private void tbConfirmPassword_TextChanged(object sender, EventArgs e)
        {
            if (tbPassword.Text == tbConfirmPassword.Text &&
                 ((isRoamingData && tbPassword.Text.Length >= GPConfig.Win7RdvMinimumPassphrase) ||
                 (!isRoamingData && tbPassword.Text.Length >= GPConfig.Win7FdvMinimumPassphrase)))
            {
                VerifyFieldsAndSetEncryptButton();
            }
            else
            {
                btnEncrypt.Enabled = false;
            }
        }

        private void btnSelectCert_Click(object sender, EventArgs e)
        {
            String commonName = String.Empty;
            tbCertThumbprint.Text = Certs.GetThumbprintFromStore(this.Handle, out commonName);
        }

        private void tbCertThumbprint_TextChanged(object sender, EventArgs e)
        {
            VerifyFieldsAndSetEncryptButton();
        }

        private void cbAutoUnlock_CheckedChanged(object sender, EventArgs e)
        {
            createAutoUnlockKey = cbAutoUnlock.Checked;
        }
    }
}
